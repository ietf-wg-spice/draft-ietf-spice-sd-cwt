sd-cwt-types = sd-cwt-issued / kbt-cwt

sd-cwt-issued = #6.18([
   protected: bstr .cbor sd-protected,
   sd-unprotected,
   payload: bstr .cbor sd-payload,
   signature: bstr
])

kbt-cwt = #6.18([
   protected: bstr .cbor kbt-protected,
   kbt-unprotected,
   payload: bstr .cbor kbt-payload,
   signature: bstr
])

sd-protected = {
   &(typ: 16) ^ => "application/sd-cwt" / TBD11,
   &(alg: 1) ^ => int,
   &(sd_alg: TBD2) ^ => int,        ; -16 for sha-256
   ? &(sd_aead: TBD7) ^ => uint .size 2
   * key => any
}

kbt-protected = {
   &(typ: 16) ^ => "application/kb+cwt" / TBD12,
   &(alg: 1) ^ => int,
   &(kcwt: 13) ^ => sd-cwt-issued,
   * key => any
}

sd-unprotected = {
   ? &(sd_claims: TBD1) ^ => salted-array,
   ? &(sd_encrypted_claims: TBD6) ^ => encrypted-array,
   ? &(sd_cose_encrypted_claims: TBD8) ^ => cose-encrypted-array,
   * key => any
}

kbt-unprotected = {
   * key => any
}

sd-payload = {
    ; standard claims
      &(iss: 1) ^ => tstr, ; "https://issuer.example"
    ? &(sub: 2) ^ => tstr, ; "https://device.example"
    ? &(aud: 3) ^ => tstr, ; "https://verifier.example/app"
    ? &(exp: 4) ^ => int,  ; 1883000000
    ? &(nbf: 5) ^ => int,  ; 1683000000
    ? &(iat: 6) ^ => int,  ; 1683000000
    ? &(cti: 7) ^ => bstr,
      &(cnf: 8) ^ => { * key => any }, ; key confirmation
    ? &(cnonce: 39) ^ => bstr,
    ;
    ? &(redacted_claim_keys: REDACTED_KEYS) ^ => [ * bstr ],
    * key => any
}

kbt-payload = {
      &(aud: 3) ^ => tstr, ; "https://verifier.example/app"
    ? &(exp: 4) ^ => int,  ; 1883000000
    ? &(nbf: 5) ^ => int,  ; 1683000000
      &(iat: 6) ^ => int,  ; 1683000000
    ? &(cnonce: 39) ^ => bstr,
    * key => any
}

salted-array = [ +bstr .cbor salted ]
salted = salted-claim / salted-element / decoy
salted-claim = [
  bstr .size 16,     ; 128-bit salt
  any,               ; claim value
  (int / text)       ; claim name
]
salted-element = [
  bstr .size 16,     ; 128-bit salt
  any                ; claim value
]
decoy = [
  bstr .size 16      ; 128-bit salt
]
;bstr-encoded-salted = bstr .cbor salted

encrypted-array = [ +encrypted ]
encrypted = [
  bstr .size 16,     ; 128-bit nonce
  bstr,              ; the ciphertext output of a bstr-encoded-salted
                     ;   with a matching salt
  bstr               ; the corresponding MAC
]

cose-encrypted-array = [ +cose-encrypted ]
cose-encrypted = COSE_Encrypt0_Tagged / COSE_Encrypt_Tagged

COSE_Encrypt0_Tagged = #6.16(COSE_Encrypt0)
COSE_Encrypt_Tagged = #6.96(COSE_Encrypt)

COSE_Encrypt0 = [
    Headers,
    ciphertext : bstr / nil,
]

COSE_Encrypt = [
    Headers,
    ciphertext : bstr / nil,
    recipients : [+COSE_recipient]
]

COSE_recipient = [
    Headers,
    ciphertext : bstr / nil,
    ? recipients : [+COSE_recipient]
]

Headers = (
    protected : empty_or_serialized_map,
    unprotected : header_map
)
header_map = {
    * key => any
}
empty_or_serialized_map = bstr .cbor header_map / bstr .size 0

key = int / text
TBD1 = 17
TBD2 = 18
TBD6 = 19
TBD7 = 20
TBD8 = 21

;TBD3 = 58;  CBOR tag wrapping to-be-redacted keys or elements

TBD11 = 298
TBD12 = 299

; REDACTED_KEYS is to be used in CDDL payloads that are meant to
; convey that a map key is redacted.
REDACTED_KEYS = #7.59  ; #7.<TBD4>
;TBD4 = 59          ; for CBOR simple value 59

; redacted_claim_element is to be used in CDDL payloads that contain
; array elements that are meant to be redacted.
redacted_claim_element = #6.60( bstr .size 16 )  ; #6.<TBD5>(bstr)
;TBD5 = 60; CBOR tag wrapping redacted_claim_element

